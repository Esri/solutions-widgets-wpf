// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace OOBUITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// test changing defaulttitle
        /// </summary>
        public void ChangeTitleTest()
        {
            #region Variable Declarations
            WpfEdit uITb_titleEdit = this.UIConfigureOrderofBattWindow.UITb_titleEdit;
            #endregion

            // Type 'Friendly Forces' in 'tb_title' text box
            uITb_titleEdit.Text = this.ChangeTitleTestParams.UITb_titleEditText;
        }
        
        /// <summary>
        /// ChangeDescriptionTest - Use 'ChangeDescriptionTestParams' to pass parameters into this method.
        /// </summary>
        public void ChangeDescriptionTest()
        {
            #region Variable Declarations
            WpfEdit uITb_DescEdit = this.UIConfigureOrderofBattWindow.UITb_DescEdit;
            #endregion

            // Type 'Order of Battle - Friedly Forces' in 'tb_Desc' text box
            uITb_DescEdit.Text = this.ChangeDescriptionTestParams.UITb_DescEditText;
        }
        
        /// <summary>
        /// ChangeDatasourceTest - Use 'ChangeDatasourceTestParams' to pass parameters into this method.
        /// </summary>
        public void ChangeDatasourceTest()
        {
            #region Variable Declarations
            WpfToggleButton uIButtonToggleButton = this.UIConfigureOrderofBattWindow.UIItemTabList.UIDataTabPage.UIDataSourceSelectorCustom.UIButtonToggleButton;
            WpfTreeItem uIItemTreeItem = this.UIConfigureOrderofBattWindow.UIItemTree.UIESRIArcGISAppCoreWidTreeItem.UIItemTreeItem;
            #endregion

            // Set to 'Pressed' state 'Button' toggle button
            uIButtonToggleButton.Pressed = this.ChangeDatasourceTestParams.UIButtonToggleButtonPressed;

            // Click 'ESRI.ArcGIS.AppCore.Widgets.Widgets.Common.DataSou...' -> tree item numbered 2 in 'ESRI.ArcGIS.AppCore.Widgets.Widgets.Common.DataSou...' tree item
            Mouse.Click(uIItemTreeItem, new Point(149, 17));
        }
        
        /// <summary>
        /// AddLabelTest - Use 'AddLabelTestParams' to pass parameters into this method.
        /// </summary>
        public void AddLabelTest()
        {
            #region Variable Declarations
            WpfTabPage uIDataTabPage = this.UIConfigureOrderofBattWindow.UIItemTabList.UIDataTabPage;
            WpfList uILb_labelList = this.UIConfigureOrderofBattWindow.UILb_labelList;
            #endregion

            // Click 'Data' tab
            Mouse.Click(uIDataTabPage, new Point(525, 285));

            // Select 'uniquedesignation' in 'lb_label' list box
            uILb_labelList.SelectedItemsAsString = this.AddLabelTestParams.UILb_labelListSelectedItemsAsString;
        }
        
        /// <summary>
        /// SelectSymbolRadioButtonTest - Use 'SelectSymbolRadioButtonTestParams' to pass parameters into this method.
        /// </summary>
        public void SelectSymbolRadioButtonTest()
        {
            #region Variable Declarations
            WpfRadioButton uISymbolRadioButton = this.UIConfigureOrderofBattWindow.UIItemTabList.UIDataTabPage.UISymbolRadioButton;
            #endregion

            // Select 'Symbol' radio button
            uISymbolRadioButton.Selected = this.SelectSymbolRadioButtonTestParams.UISymbolRadioButtonSelected;
        }
        
        /// <summary>
        /// AddUnitsDataSourceTest
        /// </summary>
        public void AddUnitsDataSourceTest()
        {
            #region Variable Declarations
            WpfButton uIAddButton = this.UIConfigureOrderofBattWindow.UIItemTabList.UIDataTabPage.UIAddButton;
            #endregion

            // Click 'Add' button
            Mouse.Click(uIAddButton, new Point(30, 13));
        }
        
        /// <summary>
        /// ModifyOOBDatasourceName - Use 'ModifyOOBDatasourceNameParams' to pass parameters into this method.
        /// </summary>
        public void ModifyOOBDatasourceName()
        {
            #region Variable Declarations
            WpfEdit uITb_dsnameEdit = this.UIConfigureOrderofBattWindow.UIItemTabList.UIDataTabPage.UITb_dsnameEdit;
            #endregion

            // Type 'Equipment' in 'tb_dsname' text box
            uITb_dsnameEdit.Text = this.ModifyOOBDatasourceNameParams.UITb_dsnameEditText;
        }
        
        /// <summary>
        /// SetSingleFieldDescriptionTest - Use 'SetSingleFieldDescriptionTestParams' to pass parameters into this method.
        /// </summary>
        public void SetSingleFieldDescriptionTest()
        {
            #region Variable Declarations
            WpfRadioButton uISinglefieldRadioButton = this.UIConfigureOrderofBattWindow.UIItemTabList.UIDataTabPage.UISinglefieldRadioButton;
            #endregion

            // Select 'Single field' radio button
            uISinglefieldRadioButton.Selected = this.SetSingleFieldDescriptionTestParams.UISinglefieldRadioButtonSelected;
        }
        
        /// <summary>
        /// CreateCustomDescriptionTest - Use 'CreateCustomDescriptionTestParams' to pass parameters into this method.
        /// </summary>
        public void CreateCustomDescriptionTest()
        {
            #region Variable Declarations
            WpfRadioButton uICustomRadioButton = this.UIConfigureOrderofBattWindow.UIItemTabList.UIDataTabPage.UICustomRadioButton;
            WpfEdit uIRtDescEdit = this.UIConfigureOrderofBattWindow.UIItemTabList.UIDataTabPage.UIRtDescEdit;
            WpfTabPage uIDataTabPage = this.UIConfigureOrderofBattWindow.UIItemTabList.UIDataTabPage;
            WpfList uILb_descList = this.UIConfigureOrderofBattWindow.UILb_descList;
            #endregion

            // Select 'Custom' radio button
            uICustomRadioButton.Selected = this.CreateCustomDescriptionTestParams.UICustomRadioButtonSelected;

            // Type 'Type:' in 'rtDesc' text box
            uIRtDescEdit.Text = this.CreateCustomDescriptionTestParams.UIRtDescEditText;

            // Click 'Data' tab
            Mouse.Click(uIDataTabPage, new Point(518, 358));

            // Select 'type' in 'lb_desc' list box
            uILb_descList.SelectedItemsAsString = this.CreateCustomDescriptionTestParams.UILb_descListSelectedItemsAsString;
        }
        
        /// <summary>
        /// ClickFeatureActionsTest
        /// </summary>
        public void ClickFeatureActionsTest()
        {
            #region Variable Declarations
            WpfTabPage uIFeatureActionsTabPage = this.UIConfigureOrderofBattWindow.UIItemTabList.UIFeatureActionsTabPage;
            #endregion

            // Click 'Feature Actions' tab
            Mouse.Click(uIFeatureActionsTabPage, new Point(58, 15));
        }
        
        /// <summary>
        /// SelectZoomsToFATest - Use 'SelectZoomsToFATestParams' to pass parameters into this method.
        /// </summary>
        public void SelectZoomsToFATest()
        {
            #region Variable Declarations
            WpfCheckBox uIZoomstofeatureonthemCheckBox = this.UIConfigureOrderofBattWindow.UIItemCustom.UIItemList.UIESRIArcGISAppCoreWidListItem.UIZoomstofeatureonthemCheckBox;
            #endregion

            // Select 'Zooms to feature on the map' check box
            uIZoomstofeatureonthemCheckBox.Checked = this.SelectZoomsToFATestParams.UIZoomstofeatureonthemCheckBoxChecked;
        }
        
        /// <summary>
        /// SelectPanToFATest - Use 'SelectPanToFATestParams' to pass parameters into this method.
        /// </summary>
        public void SelectPanToFATest()
        {
            #region Variable Declarations
            WpfCheckBox uIPanstofeatureonthemaCheckBox = this.UIConfigureOrderofBattWindow.UIItemCustom.UIItemList.UIESRIArcGISAppCoreWidListItem1.UIPanstofeatureonthemaCheckBox;
            #endregion

            // Select 'Pans to feature on the map' check box
            uIPanstofeatureonthemaCheckBox.Checked = this.SelectPanToFATestParams.UIPanstofeatureonthemaCheckBoxChecked;
        }
        
        /// <summary>
        /// SelectFollowFATest - Use 'SelectFollowFATestParams' to pass parameters into this method.
        /// </summary>
        public void SelectFollowFATest()
        {
            #region Variable Declarations
            WpfCheckBox uIFollowsthefeatureontCheckBox = this.UIConfigureOrderofBattWindow.UIItemCustom.UIItemList.UIESRIArcGISAppCoreWidListItem2.UIFollowsthefeatureontCheckBox;
            #endregion

            // Select 'Follows the feature on the map' check box
            uIFollowsthefeatureontCheckBox.Checked = this.SelectFollowFATestParams.UIFollowsthefeatureontCheckBoxChecked;
        }
        
        /// <summary>
        /// SelectHighlightFATest - Use 'SelectHighlightFATestParams' to pass parameters into this method.
        /// </summary>
        public void SelectHighlightFATest()
        {
            #region Variable Declarations
            WpfCheckBox uIHighlightsthefeatureCheckBox = this.UIConfigureOrderofBattWindow.UIItemCustom.UIItemList.UIESRIArcGISAppCoreWidListItem3.UIHighlightsthefeatureCheckBox;
            #endregion

            // Select 'Highlights the feature on the map' check box
            uIHighlightsthefeatureCheckBox.Checked = this.SelectHighlightFATestParams.UIHighlightsthefeatureCheckBoxChecked;
        }
        
        /// <summary>
        /// SelectShowPopupFATest - Use 'SelectShowPopupFATestParams' to pass parameters into this method.
        /// </summary>
        public void SelectShowPopupFATest()
        {
            #region Variable Declarations
            WpfCheckBox uIShowsthepopupforthefCheckBox = this.UIConfigureOrderofBattWindow.UIItemCustom.UIItemList.UIESRIArcGISAppCoreWidListItem4.UIShowsthepopupforthefCheckBox;
            #endregion

            // Select 'Shows the popup for the feature' check box
            uIShowsthepopupforthefCheckBox.Checked = this.SelectShowPopupFATestParams.UIShowsthepopupforthefCheckBoxChecked;
        }
        
        /// <summary>
        /// UnselectZoomtoFATest - Use 'UnselectZoomtoFATestParams' to pass parameters into this method.
        /// </summary>
        public void UnselectZoomtoFATest()
        {
            #region Variable Declarations
            WpfCheckBox uIZoomstofeatureonthemCheckBox = this.UIConfigureOrderofBattWindow.UIItemCustom.UIItemList.UIESRIArcGISAppCoreWidListItem.UIZoomstofeatureonthemCheckBox;
            #endregion

            // Clear 'Zooms to feature on the map' check box
            uIZoomstofeatureonthemCheckBox.Checked = this.UnselectZoomtoFATestParams.UIZoomstofeatureonthemCheckBoxChecked;
        }
        
        /// <summary>
        /// UnselectPanToFATest - Use 'UnselectPanToFATestParams' to pass parameters into this method.
        /// </summary>
        public void UnselectPanToFATest()
        {
            #region Variable Declarations
            WpfCheckBox uIPanstofeatureonthemaCheckBox = this.UIConfigureOrderofBattWindow.UIItemCustom.UIItemList.UIESRIArcGISAppCoreWidListItem1.UIPanstofeatureonthemaCheckBox;
            #endregion

            // Clear 'Pans to feature on the map' check box
            uIPanstofeatureonthemaCheckBox.Checked = this.UnselectPanToFATestParams.UIPanstofeatureonthemaCheckBoxChecked;
        }
        
        /// <summary>
        /// UnselectFollowFATest - Use 'UnselectFollowFATestParams' to pass parameters into this method.
        /// </summary>
        public void UnselectFollowFATest()
        {
            #region Variable Declarations
            WpfCheckBox uIFollowsthefeatureontCheckBox = this.UIConfigureOrderofBattWindow.UIItemCustom.UIItemList.UIESRIArcGISAppCoreWidListItem2.UIFollowsthefeatureontCheckBox;
            #endregion

            // Clear 'Follows the feature on the map' check box
            uIFollowsthefeatureontCheckBox.Checked = this.UnselectFollowFATestParams.UIFollowsthefeatureontCheckBoxChecked;
        }
        
        /// <summary>
        /// UnselectHighlightFATest - Use 'UnselectHighlightFATestParams' to pass parameters into this method.
        /// </summary>
        public void UnselectHighlightFATest()
        {
            #region Variable Declarations
            WpfCheckBox uIHighlightsthefeatureCheckBox = this.UIConfigureOrderofBattWindow.UIItemCustom.UIItemList.UIESRIArcGISAppCoreWidListItem3.UIHighlightsthefeatureCheckBox;
            #endregion

            // Clear 'Highlights the feature on the map' check box
            uIHighlightsthefeatureCheckBox.Checked = this.UnselectHighlightFATestParams.UIHighlightsthefeatureCheckBoxChecked;
        }
        
        /// <summary>
        /// UnselectShowPopuptFATest - Use 'UnselectShowPopuptFATestParams' to pass parameters into this method.
        /// </summary>
        public void UnselectShowPopuptFATest()
        {
            #region Variable Declarations
            WpfCheckBox uIShowsthepopupforthefCheckBox = this.UIConfigureOrderofBattWindow.UIItemCustom.UIItemList.UIESRIArcGISAppCoreWidListItem4.UIShowsthepopupforthefCheckBox;
            #endregion

            // Clear 'Shows the popup for the feature' check box
            uIShowsthepopupforthefCheckBox.Checked = this.UnselectShowPopuptFATestParams.UIShowsthepopupforthefCheckBoxChecked;
        }
        
        /// <summary>
        /// ClickOOBConfigOKTest
        /// </summary>
        public void ClickOOBConfigOKTest()
        {
            #region Variable Declarations
            WpfButton uIOKButton = this.UIConfigureOrderofBattWindow.UIOKButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(36, 16));
        }
        
        /// <summary>
        /// ClickShowToolsBtn
        /// </summary>
        public void ClickShowToolsBtn()
        {
            #region Variable Declarations
            WpfButton uIBtnToolsButton = this.UIFriendlyForcesWindow.UIBtnToolsButton;
            #endregion

            // Click 'btnTools' button
            Mouse.Click(uIBtnToolsButton, new Point(8, 14));
        }
        
        /// <summary>
        /// ClickConfigureSelectionModeButtonTest
        /// </summary>
        public void ClickConfigureSelectionModeButtonTest()
        {
            #region Variable Declarations
            WpfButton uIBtnSelectionModeButton = this.UIFriendlyForcesWindow.UIBtnSelectionModeButton;
            #endregion

            // Click 'btnSelectionMode' button
            Mouse.Click(uIBtnSelectionModeButton, new Point(13, 13));
        }
        
        /// <summary>
        /// SelectSubordinateCheckboxTest - Use 'SelectSubordinateCheckboxTestParams' to pass parameters into this method.
        /// </summary>
        public void SelectSubordinateCheckboxTest()
        {
            #region Variable Declarations
            WpfCheckBox uISubordinateCheckBox = this.UIFriendlyForcesWindow.UISubordinateCheckBox;
            #endregion

            // Select 'Subordinate' check box
            uISubordinateCheckBox.Checked = this.SelectSubordinateCheckboxTestParams.UISubordinateCheckBoxChecked;
        }
        
        /// <summary>
        /// SelectImmediateRBTest - Use 'SelectImmediateRBTestParams' to pass parameters into this method.
        /// </summary>
        public void SelectImmediateRBTest()
        {
            #region Variable Declarations
            WpfRadioButton uIImmediateRadioButton = this.UIFriendlyForcesWindow.UIImmediateRadioButton;
            #endregion

            // Select 'Immediate' radio button
            uIImmediateRadioButton.Selected = this.SelectImmediateRBTestParams.UIImmediateRadioButtonSelected;
        }
        
        /// <summary>
        /// SelectAllSubordinatesRBTest - Use 'SelectAllSubordinatesRBTestParams' to pass parameters into this method.
        /// </summary>
        public void SelectAllSubordinatesRBTest()
        {
            #region Variable Declarations
            WpfRadioButton uIAllRadioButton = this.UIFriendlyForcesWindow.UIAllRadioButton;
            #endregion

            // Select 'All' radio button
            uIAllRadioButton.Selected = this.SelectAllSubordinatesRBTestParams.UIAllRadioButtonSelected;
        }
        
        /// <summary>
        /// ClickSelectFeaturesButtonTest
        /// </summary>
        public void ClickSelectFeaturesButtonTest()
        {
            #region Variable Declarations
            WpfButton uISelectFeaturesButtonButton = this.UIFriendlyForcesWindow.UISelectFeaturesButtonButton;
            #endregion

            // Click 'SelectFeaturesButton' button
            Mouse.Click(uISelectFeaturesButtonButton, new Point(19, 27));
        }
        
        /// <summary>
        /// ClickClearSelectedButtonTest
        /// </summary>
        public void ClickClearSelectedButtonTest()
        {
            #region Variable Declarations
            WpfButton uIClearSelectionButtonButton = this.UIFriendlyForcesWindow.UIClearSelectionButtonButton;
            #endregion

            // Click 'ClearSelectionButton' button
            Mouse.Click(uIClearSelectionButtonButton, new Point(16, 19));
        }
        
        /// <summary>
        /// ClickShowFeaturesTest
        /// </summary>
        public void ClickShowFeaturesTest()
        {
            #region Variable Declarations
            WpfButton uIShowFeaturesButtonButton = this.UIFriendlyForcesWindow.UIShowFeaturesButtonButton;
            #endregion

            // Click 'ShowFeaturesButton' button
            Mouse.Click(uIShowFeaturesButtonButton, new Point(19, 20));
        }
        
        /// <summary>
        /// ClickCancelShowFeaturesTest
        /// </summary>
        public void ClickCancelShowFeaturesTest()
        {
            #region Variable Declarations
            WpfButton uICancelShowButtonButton = this.UIFriendlyForcesWindow.UICancelShowButtonButton;
            #endregion

            // Click 'CancelShowButton' button
            Mouse.Click(uICancelShowButtonButton, new Point(17, 19));
        }
        
        /// <summary>
        /// ClickZoomToSelectedTest
        /// </summary>
        public void ClickZoomToSelectedTest()
        {
            #region Variable Declarations
            WpfButton uIZoomToSelectedButtonButton = this.UIFriendlyForcesWindow.UIZoomToSelectedButtonButton;
            #endregion

            // Click 'ZoomToSelectedButton' button
            Mouse.Click(uIZoomToSelectedButtonButton, new Point(17, 21));
        }
        
        /// <summary>
        /// ClickPanToButton
        /// </summary>
        public void ClickPanToButton()
        {
            #region Variable Declarations
            WpfButton uIPanToSelectedButtonButton = this.UIFriendlyForcesWindow.UIPanToSelectedButtonButton;
            #endregion

            // Click 'PanToSelectedButton' button
            Mouse.Click(uIPanToSelectedButtonButton, new Point(12, 19));
        }
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WpfEdit uITb_titleEdit = this.UIConfigureOrderofBattWindow.UITb_titleEdit;
            #endregion

            // Type 'FriendlyForces' in 'tb_title' text box
            uITb_titleEdit.Text = this.RecordedMethod1Params.UITb_titleEditText;
        }
        
        #region Properties
        public virtual ChangeTitleTestParams ChangeTitleTestParams
        {
            get
            {
                if ((this.mChangeTitleTestParams == null))
                {
                    this.mChangeTitleTestParams = new ChangeTitleTestParams();
                }
                return this.mChangeTitleTestParams;
            }
        }
        
        public virtual ChangeDescriptionTestParams ChangeDescriptionTestParams
        {
            get
            {
                if ((this.mChangeDescriptionTestParams == null))
                {
                    this.mChangeDescriptionTestParams = new ChangeDescriptionTestParams();
                }
                return this.mChangeDescriptionTestParams;
            }
        }
        
        public virtual ChangeDatasourceTestParams ChangeDatasourceTestParams
        {
            get
            {
                if ((this.mChangeDatasourceTestParams == null))
                {
                    this.mChangeDatasourceTestParams = new ChangeDatasourceTestParams();
                }
                return this.mChangeDatasourceTestParams;
            }
        }
        
        public virtual AddLabelTestParams AddLabelTestParams
        {
            get
            {
                if ((this.mAddLabelTestParams == null))
                {
                    this.mAddLabelTestParams = new AddLabelTestParams();
                }
                return this.mAddLabelTestParams;
            }
        }
        
        public virtual SelectSymbolRadioButtonTestParams SelectSymbolRadioButtonTestParams
        {
            get
            {
                if ((this.mSelectSymbolRadioButtonTestParams == null))
                {
                    this.mSelectSymbolRadioButtonTestParams = new SelectSymbolRadioButtonTestParams();
                }
                return this.mSelectSymbolRadioButtonTestParams;
            }
        }
        
        public virtual ModifyOOBDatasourceNameParams ModifyOOBDatasourceNameParams
        {
            get
            {
                if ((this.mModifyOOBDatasourceNameParams == null))
                {
                    this.mModifyOOBDatasourceNameParams = new ModifyOOBDatasourceNameParams();
                }
                return this.mModifyOOBDatasourceNameParams;
            }
        }
        
        public virtual SetSingleFieldDescriptionTestParams SetSingleFieldDescriptionTestParams
        {
            get
            {
                if ((this.mSetSingleFieldDescriptionTestParams == null))
                {
                    this.mSetSingleFieldDescriptionTestParams = new SetSingleFieldDescriptionTestParams();
                }
                return this.mSetSingleFieldDescriptionTestParams;
            }
        }
        
        public virtual CreateCustomDescriptionTestParams CreateCustomDescriptionTestParams
        {
            get
            {
                if ((this.mCreateCustomDescriptionTestParams == null))
                {
                    this.mCreateCustomDescriptionTestParams = new CreateCustomDescriptionTestParams();
                }
                return this.mCreateCustomDescriptionTestParams;
            }
        }
        
        public virtual SelectZoomsToFATestParams SelectZoomsToFATestParams
        {
            get
            {
                if ((this.mSelectZoomsToFATestParams == null))
                {
                    this.mSelectZoomsToFATestParams = new SelectZoomsToFATestParams();
                }
                return this.mSelectZoomsToFATestParams;
            }
        }
        
        public virtual SelectPanToFATestParams SelectPanToFATestParams
        {
            get
            {
                if ((this.mSelectPanToFATestParams == null))
                {
                    this.mSelectPanToFATestParams = new SelectPanToFATestParams();
                }
                return this.mSelectPanToFATestParams;
            }
        }
        
        public virtual SelectFollowFATestParams SelectFollowFATestParams
        {
            get
            {
                if ((this.mSelectFollowFATestParams == null))
                {
                    this.mSelectFollowFATestParams = new SelectFollowFATestParams();
                }
                return this.mSelectFollowFATestParams;
            }
        }
        
        public virtual SelectHighlightFATestParams SelectHighlightFATestParams
        {
            get
            {
                if ((this.mSelectHighlightFATestParams == null))
                {
                    this.mSelectHighlightFATestParams = new SelectHighlightFATestParams();
                }
                return this.mSelectHighlightFATestParams;
            }
        }
        
        public virtual SelectShowPopupFATestParams SelectShowPopupFATestParams
        {
            get
            {
                if ((this.mSelectShowPopupFATestParams == null))
                {
                    this.mSelectShowPopupFATestParams = new SelectShowPopupFATestParams();
                }
                return this.mSelectShowPopupFATestParams;
            }
        }
        
        public virtual UnselectZoomtoFATestParams UnselectZoomtoFATestParams
        {
            get
            {
                if ((this.mUnselectZoomtoFATestParams == null))
                {
                    this.mUnselectZoomtoFATestParams = new UnselectZoomtoFATestParams();
                }
                return this.mUnselectZoomtoFATestParams;
            }
        }
        
        public virtual UnselectPanToFATestParams UnselectPanToFATestParams
        {
            get
            {
                if ((this.mUnselectPanToFATestParams == null))
                {
                    this.mUnselectPanToFATestParams = new UnselectPanToFATestParams();
                }
                return this.mUnselectPanToFATestParams;
            }
        }
        
        public virtual UnselectFollowFATestParams UnselectFollowFATestParams
        {
            get
            {
                if ((this.mUnselectFollowFATestParams == null))
                {
                    this.mUnselectFollowFATestParams = new UnselectFollowFATestParams();
                }
                return this.mUnselectFollowFATestParams;
            }
        }
        
        public virtual UnselectHighlightFATestParams UnselectHighlightFATestParams
        {
            get
            {
                if ((this.mUnselectHighlightFATestParams == null))
                {
                    this.mUnselectHighlightFATestParams = new UnselectHighlightFATestParams();
                }
                return this.mUnselectHighlightFATestParams;
            }
        }
        
        public virtual UnselectShowPopuptFATestParams UnselectShowPopuptFATestParams
        {
            get
            {
                if ((this.mUnselectShowPopuptFATestParams == null))
                {
                    this.mUnselectShowPopuptFATestParams = new UnselectShowPopuptFATestParams();
                }
                return this.mUnselectShowPopuptFATestParams;
            }
        }
        
        public virtual SelectSubordinateCheckboxTestParams SelectSubordinateCheckboxTestParams
        {
            get
            {
                if ((this.mSelectSubordinateCheckboxTestParams == null))
                {
                    this.mSelectSubordinateCheckboxTestParams = new SelectSubordinateCheckboxTestParams();
                }
                return this.mSelectSubordinateCheckboxTestParams;
            }
        }
        
        public virtual SelectImmediateRBTestParams SelectImmediateRBTestParams
        {
            get
            {
                if ((this.mSelectImmediateRBTestParams == null))
                {
                    this.mSelectImmediateRBTestParams = new SelectImmediateRBTestParams();
                }
                return this.mSelectImmediateRBTestParams;
            }
        }
        
        public virtual SelectAllSubordinatesRBTestParams SelectAllSubordinatesRBTestParams
        {
            get
            {
                if ((this.mSelectAllSubordinatesRBTestParams == null))
                {
                    this.mSelectAllSubordinatesRBTestParams = new SelectAllSubordinatesRBTestParams();
                }
                return this.mSelectAllSubordinatesRBTestParams;
            }
        }
        
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public UIConfigureOrderofBattWindow UIConfigureOrderofBattWindow
        {
            get
            {
                if ((this.mUIConfigureOrderofBattWindow == null))
                {
                    this.mUIConfigureOrderofBattWindow = new UIConfigureOrderofBattWindow();
                }
                return this.mUIConfigureOrderofBattWindow;
            }
        }
        
        public UIFriendlyForcesWindow UIFriendlyForcesWindow
        {
            get
            {
                if ((this.mUIFriendlyForcesWindow == null))
                {
                    this.mUIFriendlyForcesWindow = new UIFriendlyForcesWindow();
                }
                return this.mUIFriendlyForcesWindow;
            }
        }
        #endregion
        
        #region Fields
        private ChangeTitleTestParams mChangeTitleTestParams;
        
        private ChangeDescriptionTestParams mChangeDescriptionTestParams;
        
        private ChangeDatasourceTestParams mChangeDatasourceTestParams;
        
        private AddLabelTestParams mAddLabelTestParams;
        
        private SelectSymbolRadioButtonTestParams mSelectSymbolRadioButtonTestParams;
        
        private ModifyOOBDatasourceNameParams mModifyOOBDatasourceNameParams;
        
        private SetSingleFieldDescriptionTestParams mSetSingleFieldDescriptionTestParams;
        
        private CreateCustomDescriptionTestParams mCreateCustomDescriptionTestParams;
        
        private SelectZoomsToFATestParams mSelectZoomsToFATestParams;
        
        private SelectPanToFATestParams mSelectPanToFATestParams;
        
        private SelectFollowFATestParams mSelectFollowFATestParams;
        
        private SelectHighlightFATestParams mSelectHighlightFATestParams;
        
        private SelectShowPopupFATestParams mSelectShowPopupFATestParams;
        
        private UnselectZoomtoFATestParams mUnselectZoomtoFATestParams;
        
        private UnselectPanToFATestParams mUnselectPanToFATestParams;
        
        private UnselectFollowFATestParams mUnselectFollowFATestParams;
        
        private UnselectHighlightFATestParams mUnselectHighlightFATestParams;
        
        private UnselectShowPopuptFATestParams mUnselectShowPopuptFATestParams;
        
        private SelectSubordinateCheckboxTestParams mSelectSubordinateCheckboxTestParams;
        
        private SelectImmediateRBTestParams mSelectImmediateRBTestParams;
        
        private SelectAllSubordinatesRBTestParams mSelectAllSubordinatesRBTestParams;
        
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private UIConfigureOrderofBattWindow mUIConfigureOrderofBattWindow;
        
        private UIFriendlyForcesWindow mUIFriendlyForcesWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ChangeTitleTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class ChangeTitleTestParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Friendly Forces' in 'tb_title' text box
        /// </summary>
        public string UITb_titleEditText = "Friendly Forces";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ChangeDescriptionTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class ChangeDescriptionTestParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Order of Battle - Friedly Forces' in 'tb_Desc' text box
        /// </summary>
        public string UITb_DescEditText = "Order of Battle - Friedly Forces";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ChangeDatasourceTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class ChangeDatasourceTestParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Button' toggle button
        /// </summary>
        public bool UIButtonToggleButtonPressed = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddLabelTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AddLabelTestParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'uniquedesignation' in 'lb_label' list box
        /// </summary>
        public string UILb_labelListSelectedItemsAsString = "uniquedesignation";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectSymbolRadioButtonTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class SelectSymbolRadioButtonTestParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Symbol' radio button
        /// </summary>
        public bool UISymbolRadioButtonSelected = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ModifyOOBDatasourceName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class ModifyOOBDatasourceNameParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Equipment' in 'tb_dsname' text box
        /// </summary>
        public string UITb_dsnameEditText = "Equipment";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetSingleFieldDescriptionTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class SetSingleFieldDescriptionTestParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Single field' radio button
        /// </summary>
        public bool UISinglefieldRadioButtonSelected = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CreateCustomDescriptionTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class CreateCustomDescriptionTestParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Custom' radio button
        /// </summary>
        public bool UICustomRadioButtonSelected = true;
        
        /// <summary>
        /// Type 'Type:' in 'rtDesc' text box
        /// </summary>
        public string UIRtDescEditText = "Type:";
        
        /// <summary>
        /// Select 'type' in 'lb_desc' list box
        /// </summary>
        public string UILb_descListSelectedItemsAsString = "type";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectZoomsToFATest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class SelectZoomsToFATestParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Zooms to feature on the map' check box
        /// </summary>
        public bool UIZoomstofeatureonthemCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectPanToFATest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class SelectPanToFATestParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Pans to feature on the map' check box
        /// </summary>
        public bool UIPanstofeatureonthemaCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectFollowFATest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class SelectFollowFATestParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Follows the feature on the map' check box
        /// </summary>
        public bool UIFollowsthefeatureontCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectHighlightFATest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class SelectHighlightFATestParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Highlights the feature on the map' check box
        /// </summary>
        public bool UIHighlightsthefeatureCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectShowPopupFATest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class SelectShowPopupFATestParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Shows the popup for the feature' check box
        /// </summary>
        public bool UIShowsthepopupforthefCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UnselectZoomtoFATest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UnselectZoomtoFATestParams
    {
        
        #region Fields
        /// <summary>
        /// Clear 'Zooms to feature on the map' check box
        /// </summary>
        public bool UIZoomstofeatureonthemCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UnselectPanToFATest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UnselectPanToFATestParams
    {
        
        #region Fields
        /// <summary>
        /// Clear 'Pans to feature on the map' check box
        /// </summary>
        public bool UIPanstofeatureonthemaCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UnselectFollowFATest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UnselectFollowFATestParams
    {
        
        #region Fields
        /// <summary>
        /// Clear 'Follows the feature on the map' check box
        /// </summary>
        public bool UIFollowsthefeatureontCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UnselectHighlightFATest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UnselectHighlightFATestParams
    {
        
        #region Fields
        /// <summary>
        /// Clear 'Highlights the feature on the map' check box
        /// </summary>
        public bool UIHighlightsthefeatureCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UnselectShowPopuptFATest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UnselectShowPopuptFATestParams
    {
        
        #region Fields
        /// <summary>
        /// Clear 'Shows the popup for the feature' check box
        /// </summary>
        public bool UIShowsthepopupforthefCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectSubordinateCheckboxTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class SelectSubordinateCheckboxTestParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Subordinate' check box
        /// </summary>
        public bool UISubordinateCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectImmediateRBTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class SelectImmediateRBTestParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Immediate' radio button
        /// </summary>
        public bool UIImmediateRadioButtonSelected = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectAllSubordinatesRBTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class SelectAllSubordinatesRBTestParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'All' radio button
        /// </summary>
        public bool UIAllRadioButtonSelected = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'FriendlyForces' in 'tb_title' text box
        /// </summary>
        public string UITb_titleEditText = "FriendlyForces";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIConfigureOrderofBattWindow : WpfWindow
    {
        
        public UIConfigureOrderofBattWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Configure Order of Battle";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Configure Order of Battle");
            #endregion
        }
        
        #region Properties
        public WpfEdit UITb_titleEdit
        {
            get
            {
                if ((this.mUITb_titleEdit == null))
                {
                    this.mUITb_titleEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITb_titleEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "tb_title";
                    this.mUITb_titleEdit.WindowTitles.Add("Configure Order of Battle");
                    #endregion
                }
                return this.mUITb_titleEdit;
            }
        }
        
        public WpfEdit UITb_DescEdit
        {
            get
            {
                if ((this.mUITb_DescEdit == null))
                {
                    this.mUITb_DescEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITb_DescEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "tb_Desc";
                    this.mUITb_DescEdit.WindowTitles.Add("Configure Order of Battle");
                    #endregion
                }
                return this.mUITb_DescEdit;
            }
        }
        
        public UIItemTabList UIItemTabList
        {
            get
            {
                if ((this.mUIItemTabList == null))
                {
                    this.mUIItemTabList = new UIItemTabList(this);
                }
                return this.mUIItemTabList;
            }
        }
        
        public UIItemTree UIItemTree
        {
            get
            {
                if ((this.mUIItemTree == null))
                {
                    this.mUIItemTree = new UIItemTree(this);
                }
                return this.mUIItemTree;
            }
        }
        
        public WpfList UILb_labelList
        {
            get
            {
                if ((this.mUILb_labelList == null))
                {
                    this.mUILb_labelList = new WpfList(this);
                    #region Search Criteria
                    this.mUILb_labelList.SearchProperties[WpfList.PropertyNames.AutomationId] = "lb_label";
                    this.mUILb_labelList.WindowTitles.Add("Configure Order of Battle");
                    #endregion
                }
                return this.mUILb_labelList;
            }
        }
        
        public WpfList UILb_descList
        {
            get
            {
                if ((this.mUILb_descList == null))
                {
                    this.mUILb_descList = new WpfList(this);
                    #region Search Criteria
                    this.mUILb_descList.SearchProperties[WpfList.PropertyNames.AutomationId] = "lb_desc";
                    this.mUILb_descList.WindowTitles.Add("Configure Order of Battle");
                    #endregion
                }
                return this.mUILb_descList;
            }
        }
        
        public UIItemCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom(this);
                }
                return this.mUIItemCustom;
            }
        }
        
        public WpfButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "OKButton";
                    this.mUIOKButton.WindowTitles.Add("Configure Order of Battle");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUITb_titleEdit;
        
        private WpfEdit mUITb_DescEdit;
        
        private UIItemTabList mUIItemTabList;
        
        private UIItemTree mUIItemTree;
        
        private WpfList mUILb_labelList;
        
        private WpfList mUILb_descList;
        
        private UIItemCustom mUIItemCustom;
        
        private WpfButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemTabList : WpfTabList
    {
        
        public UIItemTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Configure Order of Battle");
            #endregion
        }
        
        #region Properties
        public UIDataTabPage UIDataTabPage
        {
            get
            {
                if ((this.mUIDataTabPage == null))
                {
                    this.mUIDataTabPage = new UIDataTabPage(this);
                }
                return this.mUIDataTabPage;
            }
        }
        
        public WpfTabPage UIFeatureActionsTabPage
        {
            get
            {
                if ((this.mUIFeatureActionsTabPage == null))
                {
                    this.mUIFeatureActionsTabPage = new WpfTabPage(this);
                    #region Search Criteria
                    this.mUIFeatureActionsTabPage.SearchProperties[WpfTabPage.PropertyNames.Name] = "Feature Actions";
                    this.mUIFeatureActionsTabPage.WindowTitles.Add("Configure Order of Battle");
                    #endregion
                }
                return this.mUIFeatureActionsTabPage;
            }
        }
        #endregion
        
        #region Fields
        private UIDataTabPage mUIDataTabPage;
        
        private WpfTabPage mUIFeatureActionsTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIDataTabPage : WpfTabPage
    {
        
        public UIDataTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.AutomationId] = "tiDs";
            this.WindowTitles.Add("Configure Order of Battle");
            #endregion
        }
        
        #region Properties
        public UIDataSourceSelectorCustom UIDataSourceSelectorCustom
        {
            get
            {
                if ((this.mUIDataSourceSelectorCustom == null))
                {
                    this.mUIDataSourceSelectorCustom = new UIDataSourceSelectorCustom(this);
                }
                return this.mUIDataSourceSelectorCustom;
            }
        }
        
        public WpfRadioButton UISymbolRadioButton
        {
            get
            {
                if ((this.mUISymbolRadioButton == null))
                {
                    this.mUISymbolRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mUISymbolRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "rb_Symbol";
                    this.mUISymbolRadioButton.WindowTitles.Add("Configure Order of Battle");
                    #endregion
                }
                return this.mUISymbolRadioButton;
            }
        }
        
        public WpfButton UIAddButton
        {
            get
            {
                if ((this.mUIAddButton == null))
                {
                    this.mUIAddButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIAddButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnAddDS";
                    this.mUIAddButton.WindowTitles.Add("Configure Order of Battle");
                    #endregion
                }
                return this.mUIAddButton;
            }
        }
        
        public WpfEdit UITb_dsnameEdit
        {
            get
            {
                if ((this.mUITb_dsnameEdit == null))
                {
                    this.mUITb_dsnameEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITb_dsnameEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "tb_dsname";
                    this.mUITb_dsnameEdit.WindowTitles.Add("Configure Order of Battle");
                    #endregion
                }
                return this.mUITb_dsnameEdit;
            }
        }
        
        public WpfRadioButton UISinglefieldRadioButton
        {
            get
            {
                if ((this.mUISinglefieldRadioButton == null))
                {
                    this.mUISinglefieldRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mUISinglefieldRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "rb_descSinglefld";
                    this.mUISinglefieldRadioButton.WindowTitles.Add("Configure Order of Battle");
                    #endregion
                }
                return this.mUISinglefieldRadioButton;
            }
        }
        
        public WpfRadioButton UICustomRadioButton
        {
            get
            {
                if ((this.mUICustomRadioButton == null))
                {
                    this.mUICustomRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mUICustomRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "rb_descCustom";
                    this.mUICustomRadioButton.WindowTitles.Add("Configure Order of Battle");
                    #endregion
                }
                return this.mUICustomRadioButton;
            }
        }
        
        public WpfEdit UIRtDescEdit
        {
            get
            {
                if ((this.mUIRtDescEdit == null))
                {
                    this.mUIRtDescEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIRtDescEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "rtDesc";
                    this.mUIRtDescEdit.WindowTitles.Add("Configure Order of Battle");
                    #endregion
                }
                return this.mUIRtDescEdit;
            }
        }
        #endregion
        
        #region Fields
        private UIDataSourceSelectorCustom mUIDataSourceSelectorCustom;
        
        private WpfRadioButton mUISymbolRadioButton;
        
        private WpfButton mUIAddButton;
        
        private WpfEdit mUITb_dsnameEdit;
        
        private WpfRadioButton mUISinglefieldRadioButton;
        
        private WpfRadioButton mUICustomRadioButton;
        
        private WpfEdit mUIRtDescEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIDataSourceSelectorCustom : WpfCustom
    {
        
        public UIDataSourceSelectorCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.DataSourceSelector";
            this.SearchProperties["AutomationId"] = "DataSourceSelector";
            this.WindowTitles.Add("Configure Order of Battle");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton UIButtonToggleButton
        {
            get
            {
                if ((this.mUIButtonToggleButton == null))
                {
                    this.mUIButtonToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mUIButtonToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "Button";
                    this.mUIButtonToggleButton.WindowTitles.Add("Configure Order of Battle");
                    #endregion
                }
                return this.mUIButtonToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mUIButtonToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemTree : WpfTree
    {
        
        public UIItemTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Configure Order of Battle");
            #endregion
        }
        
        #region Properties
        public UIESRIArcGISAppCoreWidTreeItem UIESRIArcGISAppCoreWidTreeItem
        {
            get
            {
                if ((this.mUIESRIArcGISAppCoreWidTreeItem == null))
                {
                    this.mUIESRIArcGISAppCoreWidTreeItem = new UIESRIArcGISAppCoreWidTreeItem(this);
                }
                return this.mUIESRIArcGISAppCoreWidTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIESRIArcGISAppCoreWidTreeItem mUIESRIArcGISAppCoreWidTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIESRIArcGISAppCoreWidTreeItem : WpfTreeItem
    {
        
        public UIESRIArcGISAppCoreWidTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "ESRI.ArcGIS.AppCore.Widgets.Widgets.Common.DataSourceSelector.MapViewModel";
            this.WindowTitles.Add("Configure Order of Battle");
            #endregion
        }
        
        #region Properties
        public WpfTreeItem UIItemTreeItem
        {
            get
            {
                if ((this.mUIItemTreeItem == null))
                {
                    this.mUIItemTreeItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mUIItemTreeItem.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
                    this.mUIItemTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIItemTreeItem.WindowTitles.Add("Configure Order of Battle");
                    #endregion
                }
                return this.mUIItemTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfTreeItem mUIItemTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemCustom : WpfCustom
    {
        
        public UIItemCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.FeatureActionListView";
            this.WindowTitles.Add("Configure Order of Battle");
            #endregion
        }
        
        #region Properties
        public UIItemList UIItemList
        {
            get
            {
                if ((this.mUIItemList == null))
                {
                    this.mUIItemList = new UIItemList(this);
                }
                return this.mUIItemList;
            }
        }
        #endregion
        
        #region Fields
        private UIItemList mUIItemList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemList : WpfList
    {
        
        public UIItemList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Configure Order of Battle");
            #endregion
        }
        
        #region Properties
        public UIESRIArcGISAppCoreWidListItem UIESRIArcGISAppCoreWidListItem
        {
            get
            {
                if ((this.mUIESRIArcGISAppCoreWidListItem == null))
                {
                    this.mUIESRIArcGISAppCoreWidListItem = new UIESRIArcGISAppCoreWidListItem(this);
                }
                return this.mUIESRIArcGISAppCoreWidListItem;
            }
        }
        
        public UIESRIArcGISAppCoreWidListItem1 UIESRIArcGISAppCoreWidListItem1
        {
            get
            {
                if ((this.mUIESRIArcGISAppCoreWidListItem1 == null))
                {
                    this.mUIESRIArcGISAppCoreWidListItem1 = new UIESRIArcGISAppCoreWidListItem1(this);
                }
                return this.mUIESRIArcGISAppCoreWidListItem1;
            }
        }
        
        public UIESRIArcGISAppCoreWidListItem2 UIESRIArcGISAppCoreWidListItem2
        {
            get
            {
                if ((this.mUIESRIArcGISAppCoreWidListItem2 == null))
                {
                    this.mUIESRIArcGISAppCoreWidListItem2 = new UIESRIArcGISAppCoreWidListItem2(this);
                }
                return this.mUIESRIArcGISAppCoreWidListItem2;
            }
        }
        
        public UIESRIArcGISAppCoreWidListItem3 UIESRIArcGISAppCoreWidListItem3
        {
            get
            {
                if ((this.mUIESRIArcGISAppCoreWidListItem3 == null))
                {
                    this.mUIESRIArcGISAppCoreWidListItem3 = new UIESRIArcGISAppCoreWidListItem3(this);
                }
                return this.mUIESRIArcGISAppCoreWidListItem3;
            }
        }
        
        public UIESRIArcGISAppCoreWidListItem4 UIESRIArcGISAppCoreWidListItem4
        {
            get
            {
                if ((this.mUIESRIArcGISAppCoreWidListItem4 == null))
                {
                    this.mUIESRIArcGISAppCoreWidListItem4 = new UIESRIArcGISAppCoreWidListItem4(this);
                }
                return this.mUIESRIArcGISAppCoreWidListItem4;
            }
        }
        #endregion
        
        #region Fields
        private UIESRIArcGISAppCoreWidListItem mUIESRIArcGISAppCoreWidListItem;
        
        private UIESRIArcGISAppCoreWidListItem1 mUIESRIArcGISAppCoreWidListItem1;
        
        private UIESRIArcGISAppCoreWidListItem2 mUIESRIArcGISAppCoreWidListItem2;
        
        private UIESRIArcGISAppCoreWidListItem3 mUIESRIArcGISAppCoreWidListItem3;
        
        private UIESRIArcGISAppCoreWidListItem4 mUIESRIArcGISAppCoreWidListItem4;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIESRIArcGISAppCoreWidListItem : WpfListItem
    {
        
        public UIESRIArcGISAppCoreWidListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "ESRI.ArcGIS.AppCore.Widgets.Widgets.Common.FeatureActionListItemViewModel";
            this.WindowTitles.Add("Configure Order of Battle");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox UIZoomstofeatureonthemCheckBox
        {
            get
            {
                if ((this.mUIZoomstofeatureonthemCheckBox == null))
                {
                    this.mUIZoomstofeatureonthemCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUIZoomstofeatureonthemCheckBox.SearchProperties[WpfCheckBox.PropertyNames.HelpText] = "Zooms to feature on the map";
                    this.mUIZoomstofeatureonthemCheckBox.WindowTitles.Add("Configure Order of Battle");
                    #endregion
                }
                return this.mUIZoomstofeatureonthemCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mUIZoomstofeatureonthemCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIESRIArcGISAppCoreWidListItem1 : WpfListItem
    {
        
        public UIESRIArcGISAppCoreWidListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "ESRI.ArcGIS.AppCore.Widgets.Widgets.Common.FeatureActionListItemViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Configure Order of Battle");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox UIPanstofeatureonthemaCheckBox
        {
            get
            {
                if ((this.mUIPanstofeatureonthemaCheckBox == null))
                {
                    this.mUIPanstofeatureonthemaCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUIPanstofeatureonthemaCheckBox.SearchProperties[WpfCheckBox.PropertyNames.HelpText] = "Pans to feature on the map";
                    this.mUIPanstofeatureonthemaCheckBox.WindowTitles.Add("Configure Order of Battle");
                    #endregion
                }
                return this.mUIPanstofeatureonthemaCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mUIPanstofeatureonthemaCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIESRIArcGISAppCoreWidListItem2 : WpfListItem
    {
        
        public UIESRIArcGISAppCoreWidListItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "ESRI.ArcGIS.AppCore.Widgets.Widgets.Common.FeatureActionListItemViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Configure Order of Battle");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox UIFollowsthefeatureontCheckBox
        {
            get
            {
                if ((this.mUIFollowsthefeatureontCheckBox == null))
                {
                    this.mUIFollowsthefeatureontCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUIFollowsthefeatureontCheckBox.SearchProperties[WpfCheckBox.PropertyNames.HelpText] = "Follows the feature on the map";
                    this.mUIFollowsthefeatureontCheckBox.WindowTitles.Add("Configure Order of Battle");
                    #endregion
                }
                return this.mUIFollowsthefeatureontCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mUIFollowsthefeatureontCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIESRIArcGISAppCoreWidListItem3 : WpfListItem
    {
        
        public UIESRIArcGISAppCoreWidListItem3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "ESRI.ArcGIS.AppCore.Widgets.Widgets.Common.FeatureActionListItemViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Configure Order of Battle");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox UIHighlightsthefeatureCheckBox
        {
            get
            {
                if ((this.mUIHighlightsthefeatureCheckBox == null))
                {
                    this.mUIHighlightsthefeatureCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUIHighlightsthefeatureCheckBox.SearchProperties[WpfCheckBox.PropertyNames.HelpText] = "Highlights the feature on the map";
                    this.mUIHighlightsthefeatureCheckBox.WindowTitles.Add("Configure Order of Battle");
                    #endregion
                }
                return this.mUIHighlightsthefeatureCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mUIHighlightsthefeatureCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIESRIArcGISAppCoreWidListItem4 : WpfListItem
    {
        
        public UIESRIArcGISAppCoreWidListItem4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "ESRI.ArcGIS.AppCore.Widgets.Widgets.Common.FeatureActionListItemViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Configure Order of Battle");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox UIShowsthepopupforthefCheckBox
        {
            get
            {
                if ((this.mUIShowsthepopupforthefCheckBox == null))
                {
                    this.mUIShowsthepopupforthefCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUIShowsthepopupforthefCheckBox.SearchProperties[WpfCheckBox.PropertyNames.HelpText] = "Shows the popup for the feature";
                    this.mUIShowsthepopupforthefCheckBox.WindowTitles.Add("Configure Order of Battle");
                    #endregion
                }
                return this.mUIShowsthepopupforthefCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mUIShowsthepopupforthefCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIFriendlyForcesWindow : WpfWindow
    {
        
        public UIFriendlyForcesWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Friendly Forces";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Friendly Forces");
            #endregion
        }
        
        #region Properties
        public WpfButton UIBtnToolsButton
        {
            get
            {
                if ((this.mUIBtnToolsButton == null))
                {
                    this.mUIBtnToolsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIBtnToolsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnTools";
                    this.mUIBtnToolsButton.WindowTitles.Add("Friendly Forces");
                    #endregion
                }
                return this.mUIBtnToolsButton;
            }
        }
        
        public WpfButton UIBtnSelectionModeButton
        {
            get
            {
                if ((this.mUIBtnSelectionModeButton == null))
                {
                    this.mUIBtnSelectionModeButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIBtnSelectionModeButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnSelectionMode";
                    this.mUIBtnSelectionModeButton.WindowTitles.Add("Friendly Forces");
                    #endregion
                }
                return this.mUIBtnSelectionModeButton;
            }
        }
        
        public WpfCheckBox UISubordinateCheckBox
        {
            get
            {
                if ((this.mUISubordinateCheckBox == null))
                {
                    this.mUISubordinateCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUISubordinateCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "chkSubordinate";
                    this.mUISubordinateCheckBox.WindowTitles.Add("Friendly Forces");
                    #endregion
                }
                return this.mUISubordinateCheckBox;
            }
        }
        
        public WpfRadioButton UIImmediateRadioButton
        {
            get
            {
                if ((this.mUIImmediateRadioButton == null))
                {
                    this.mUIImmediateRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mUIImmediateRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "rbImmediate";
                    this.mUIImmediateRadioButton.WindowTitles.Add("Friendly Forces");
                    #endregion
                }
                return this.mUIImmediateRadioButton;
            }
        }
        
        public WpfRadioButton UIAllRadioButton
        {
            get
            {
                if ((this.mUIAllRadioButton == null))
                {
                    this.mUIAllRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mUIAllRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "rbAll";
                    this.mUIAllRadioButton.WindowTitles.Add("Friendly Forces");
                    #endregion
                }
                return this.mUIAllRadioButton;
            }
        }
        
        public WpfButton UISelectFeaturesButtonButton
        {
            get
            {
                if ((this.mUISelectFeaturesButtonButton == null))
                {
                    this.mUISelectFeaturesButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISelectFeaturesButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SelectFeaturesButton";
                    this.mUISelectFeaturesButtonButton.WindowTitles.Add("Friendly Forces");
                    #endregion
                }
                return this.mUISelectFeaturesButtonButton;
            }
        }
        
        public WpfButton UIClearSelectionButtonButton
        {
            get
            {
                if ((this.mUIClearSelectionButtonButton == null))
                {
                    this.mUIClearSelectionButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIClearSelectionButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ClearSelectionButton";
                    this.mUIClearSelectionButtonButton.WindowTitles.Add("Friendly Forces");
                    #endregion
                }
                return this.mUIClearSelectionButtonButton;
            }
        }
        
        public WpfButton UIShowFeaturesButtonButton
        {
            get
            {
                if ((this.mUIShowFeaturesButtonButton == null))
                {
                    this.mUIShowFeaturesButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIShowFeaturesButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ShowFeaturesButton";
                    this.mUIShowFeaturesButtonButton.WindowTitles.Add("Friendly Forces");
                    #endregion
                }
                return this.mUIShowFeaturesButtonButton;
            }
        }
        
        public WpfButton UICancelShowButtonButton
        {
            get
            {
                if ((this.mUICancelShowButtonButton == null))
                {
                    this.mUICancelShowButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICancelShowButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "CancelShowButton";
                    this.mUICancelShowButtonButton.WindowTitles.Add("Friendly Forces");
                    #endregion
                }
                return this.mUICancelShowButtonButton;
            }
        }
        
        public WpfButton UIZoomToSelectedButtonButton
        {
            get
            {
                if ((this.mUIZoomToSelectedButtonButton == null))
                {
                    this.mUIZoomToSelectedButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIZoomToSelectedButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ZoomToSelectedButton";
                    this.mUIZoomToSelectedButtonButton.WindowTitles.Add("Friendly Forces");
                    #endregion
                }
                return this.mUIZoomToSelectedButtonButton;
            }
        }
        
        public WpfButton UIPanToSelectedButtonButton
        {
            get
            {
                if ((this.mUIPanToSelectedButtonButton == null))
                {
                    this.mUIPanToSelectedButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIPanToSelectedButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PanToSelectedButton";
                    this.mUIPanToSelectedButtonButton.WindowTitles.Add("Friendly Forces");
                    #endregion
                }
                return this.mUIPanToSelectedButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIBtnToolsButton;
        
        private WpfButton mUIBtnSelectionModeButton;
        
        private WpfCheckBox mUISubordinateCheckBox;
        
        private WpfRadioButton mUIImmediateRadioButton;
        
        private WpfRadioButton mUIAllRadioButton;
        
        private WpfButton mUISelectFeaturesButtonButton;
        
        private WpfButton mUIClearSelectionButtonButton;
        
        private WpfButton mUIShowFeaturesButtonButton;
        
        private WpfButton mUICancelShowButtonButton;
        
        private WpfButton mUIZoomToSelectedButtonButton;
        
        private WpfButton mUIPanToSelectedButtonButton;
        #endregion
    }
}
